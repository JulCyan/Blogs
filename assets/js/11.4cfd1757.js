(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{191:function(e,t,v){"use strict";v.r(t);var a=v(6),_=Object(a.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"java"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java"}},[e._v("#")]),e._v(" Java")]),e._v(" "),v("h2",{attrs:{id:"泛型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[e._v("#")]),e._v(" 泛型")]),e._v(" "),v("h3",{attrs:{id:"要点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#要点"}},[e._v("#")]),e._v(" 要点")]),e._v(" "),v("ul",[v("li",[e._v("Salary<Integer> 不是 Salary<Number> 的子类")]),e._v(" "),v("li",[e._v("T 不能是基本类型, 默认为 Object")]),e._v(" "),v("li",[e._v("Producer Extends Consumer Super(PECS)")])]),e._v(" "),v("h3",{attrs:{id:"extends"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#extends"}},[e._v("#")]),e._v(" extends")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("使用类似 "),v("code",[e._v("<? extends Number>")]),e._v("通配符作为方法参数时表示：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("方法内部可以调用获取"),v("code",[e._v("Number")]),e._v("引用的方法，例如："),v("code",[e._v("Number n = obj.getFirst();")])])]),e._v(" "),v("li",[v("p",[e._v("方法内部无法调用传入"),v("code",[e._v("Number")]),e._v("引用的方法（null除外），例如："),v("code",[e._v("obj.setFirst(Number n);")])]),e._v(" "),v("p",[e._v("即使用"),v("code",[e._v("extends")]),e._v("通配符作为方法参数时表示 "),v("code",[e._v("readonly")])])])])]),e._v(" "),v("li",[v("p",[e._v("使用类似"),v("code",[e._v("<T extends Number>")]),e._v(" 定义泛型类时表示：")]),e._v(" "),v("p",[e._v("泛型类型限定为Number以及Number的子类")])])]),e._v(" "),v("h3",{attrs:{id:"super"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#super"}},[e._v("#")]),e._v(" super")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("使用类似"),v("code",[e._v("<? super Integer>")]),e._v("通配符作为方法参数时表示：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("方法内部可以调用传入"),v("code",[e._v("Integer")]),e._v("引用的方法，例如："),v("code",[e._v("obj.setFirst(Integer n);")])])]),e._v(" "),v("li",[v("p",[e._v("方法内部无法调用获取"),v("code",[e._v("Integer")]),e._v("引用的方法（"),v("code",[e._v("Object")]),e._v("除外），例如："),v("code",[e._v("Integer n = obj.getFirst();")])]),e._v(" "),v("p",[e._v("即使用"),v("code",[e._v("super")]),e._v("通配符表示 writeonly")])])])]),e._v(" "),v("li",[v("p",[e._v("使用类似 <T supter Number> 定义泛型类时表示：")]),e._v(" "),v("p",[e._v("泛型类型限定为Number以及Number的父类")])])]),e._v(" "),v("h2",{attrs:{id:"集合"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#集合"}},[e._v("#")]),e._v(" 集合")]),e._v(" "),v("p",[e._v("List, Set, Map, 支持泛型, 统一使用 Iterator 遍历")]),e._v(" "),v("h3",{attrs:{id:"list"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[e._v("#")]),e._v(" List")]),e._v(" "),v("p",[e._v("有序, 用索引访问, 元素可重复")]),e._v(" "),v("ul",[v("li",[e._v("ArrayList 数组结构, 查找快")]),e._v(" "),v("li",[e._v("LinkedList 链表结构, 增删快")])]),e._v(" "),v("h3",{attrs:{id:"map"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[e._v("#")]),e._v(" Map")]),e._v(" "),v("p",[e._v("key-value映射关系, key 唯一")]),e._v(" "),v("ul",[v("li",[e._v("HashMap, EnumMap 无序")]),e._v(" "),v("li",[e._v("TreeMap 有序, SortedMap 接口实现")])]),e._v(" "),v("h3",{attrs:{id:"set"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[e._v("#")]),e._v(" Set")]),e._v(" "),v("p",[e._v("元素唯一")]),e._v(" "),v("ul",[v("li",[e._v("HashSet 无序")]),e._v(" "),v("li",[e._v("TreeSet 有序, SortedSet 接口实现")])]),e._v(" "),v("h3",{attrs:{id:"queue"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[e._v("#")]),e._v(" Queue")]),e._v(" "),v("p",[e._v("先进先出")]),e._v(" "),v("ul",[v("li",[e._v("PriorityQueue 优先队列")]),e._v(" "),v("li",[e._v("Deque 双端队列")])]),e._v(" "),v("h3",{attrs:{id:"stack"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#stack"}},[e._v("#")]),e._v(" Stack")]),e._v(" "),v("p",[e._v("后进先出")]),e._v(" "),v("h2",{attrs:{id:"io"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#io"}},[e._v("#")]),e._v(" IO")])])}),[],!1,null,null,null);t.default=_.exports}}]);